{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC721IncorrectOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721InsufficientApproval",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "approver",
						"type": "address"
					}
				],
				"name": "ERC721InvalidApprover",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "ERC721InvalidOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC721InvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC721InvalidReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "ERC721InvalidSender",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721NonexistentToken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_fromTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_toTokenId",
						"type": "uint256"
					}
				],
				"name": "BatchMetadataUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "MetadataUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"name": "safeMint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"ERC721IncorrectOwner(address,uint256,address)": [
					{
						"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
						"params": {
							"owner": "Address of the current owner of a token.",
							"sender": "Address whose tokens are being transferred.",
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"ERC721InsufficientApproval(address,uint256)": [
					{
						"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
						"params": {
							"operator": "Address that may be allowed to operate on tokens without being their owner.",
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"ERC721InvalidApprover(address)": [
					{
						"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
						"params": {
							"approver": "Address initiating an approval operation."
						}
					}
				],
				"ERC721InvalidOperator(address)": [
					{
						"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
						"params": {
							"operator": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ERC721InvalidOwner(address)": [
					{
						"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
						"params": {
							"owner": "Address of the current owner of a token."
						}
					}
				],
				"ERC721InvalidReceiver(address)": [
					{
						"details": "Indicates a failure with the token `receiver`. Used in transfers.",
						"params": {
							"receiver": "Address to which tokens are being transferred."
						}
					}
				],
				"ERC721InvalidSender(address)": [
					{
						"details": "Indicates a failure with the token `sender`. Used in transfers.",
						"params": {
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC721NonexistentToken(uint256)": [
					{
						"details": "Indicates a `tokenId` whose `owner` is the zero address.",
						"params": {
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
				},
				"ApprovalForAll(address,address,bool)": {
					"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
				},
				"BatchMetadataUpdate(uint256,uint256)": {
					"details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
				},
				"MetadataUpdate(uint256)": {
					"details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
				}
			},
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "See {IERC721-approve}."
				},
				"balanceOf(address)": {
					"details": "See {IERC721-balanceOf}."
				},
				"getApproved(uint256)": {
					"details": "See {IERC721-getApproved}."
				},
				"isApprovedForAll(address,address)": {
					"details": "See {IERC721-isApprovedForAll}."
				},
				"name()": {
					"details": "See {IERC721Metadata-name}."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"ownerOf(uint256)": {
					"details": "See {IERC721-ownerOf}."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"setApprovalForAll(address,bool)": {
					"details": "See {IERC721-setApprovalForAll}."
				},
				"symbol()": {
					"details": "See {IERC721Metadata-symbol}."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC721-transferFrom}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"MNFT.sol": "MalluCrypto"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xde13f6ab310a659b9732f7f7ea3eed7c4d9925cc72e77e6554b2126563a143f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://2176f1c5e871613bd6502558cc98d268e92167dcd546d15941587a670a48d4eb",
				"dweb:/ipfs/QmboYR7jbENha8ahFbWeHu2pHr5jjA9PuDzRDJHLvGDCBh"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0x0660592b105270f9166bbb80f18a3fd6506cfc4ab08a55909d374f4b584010d8",
			"license": "MIT",
			"urls": [
				"bzz-raw://bbff0f7bd26d2a81e10bdac898eb6e887140103c87c1771b62ba1d4c8598896e",
				"dweb:/ipfs/QmSPznUTUWUD54WAbZFi84E4X8iVSNQTBJzYVBk9Ais7u5"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC4906.sol": {
			"keccak256": "0x79c59ccbed8a827ff823b63ffbf20d71b75e7710d01156f5632b94c4d963d26a",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cf5ad5707327ba21cb3629644525e4cbc2c0dfabc58131bf109c5d04dde9c4e",
				"dweb:/ipfs/Qmf99yZjMv7195AeoajfK57iPU2hyDWJbkwiXJYTmYnqfg"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC721.sol": {
			"keccak256": "0x8f3785d1308dee180265e23c7501c570ff1d83435788effbef6fa0ad9be97aae",
			"license": "MIT",
			"urls": [
				"bzz-raw://d90f91cd654d621d6ca8e72ed2cd30e3b4004aac74f4229d500dfac695a98cc4",
				"dweb:/ipfs/QmdhuoZMkj2KY8AKfKSKWgL2bGHfv5Rui6oYb8U6tV2ePo"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0xbb8e61c91d4c2998ab2728541b5b0648f1c2887adc40320d05f2e59dfcd7b26f",
			"license": "MIT",
			"urls": [
				"bzz-raw://17e87f4d08a4d91ed894c5dfd908c6940c2676456e1ca5f273e3bb2626b3949f",
				"dweb:/ipfs/QmbxfRXFKBGKEqQZjKX3MbKgQHjZBftUASUiAgBcak4W6p"
			]
		},
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0xcca838cc7c9ece1bf590cb2ddbfec56171605fa1763a4f23e8c8f8521a777220",
			"license": "MIT",
			"urls": [
				"bzz-raw://64f2ffdf9a7f245af33220e7f6162c3013f429536057037418fb0f3e21d1aaab",
				"dweb:/ipfs/QmWDqgsUBSJDejsac8NwgdzqGbGhweFCigWz1UcKnGVqez"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x55017a91345ea407d28848575fec7577a10d4025f3e5f206d78e52074534c617",
			"license": "MIT",
			"urls": [
				"bzz-raw://2dc01ad2a60e330da1e8b61bf73ede01c65ff8e1077bf4b79367363583761946",
				"dweb:/ipfs/QmdA8SvocYva7PU6aUTygUfvHFQfEKvnVjJWQcLnqEdY1G"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa277a1f3d75b36598450617aaf1202affc99cadf7f162c90080875cf98f92930",
			"license": "MIT",
			"urls": [
				"bzz-raw://8eb967d37ca4b5103583257804478c1506c9a27ff339af2ed0f80481f0f4a354",
				"dweb:/ipfs/QmT95ws5ZxHtrEsqHUK6brBA4eRGtae6ggYf6vyMVX49JM"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
			"keccak256": "0xff8cc11100e2d530082b23fbf0bf74e4b182df8f2d33d31f13d9a33d060c0a6a",
			"license": "MIT",
			"urls": [
				"bzz-raw://d451b2e9b617f3ac651ce78bcb37bc32368621a7e98b92c69e2073e74cc7247b",
				"dweb:/ipfs/QmYnWcbAPkwg2w5cxN8D4UnTwgsrAxAG92QGXnwjVH8VGW"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x8097ab0621db02404597f6a74654b835035a3df43392c7c1de12fe3702d3b613",
			"license": "MIT",
			"urls": [
				"bzz-raw://5d554004601f2cba955ed5c9c1537dab564a9c98258403d8b78d8ad4b3d2d245",
				"dweb:/ipfs/QmU5V1CFikeVzqaKBDc18bHPnroDhAh1Z5gHWgwo17gwFf"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x32f1faf405d9d68f67d407d817ef8f4262be6e21223c04fa371b8c7a63762890",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e15ded8a8dfeaf5d5f6ab45c2520910f2f98381bc3136d64fc76894e0db49d1",
				"dweb:/ipfs/QmTYQqvbNnAjTB4hfQHMgnj3u9kNqkykfdCBY5TkXe6zp1"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x503f7cbbead49954851aa35f94e210b3b9adb4e003bc0cb4f838854802770dc1",
			"license": "MIT",
			"urls": [
				"bzz-raw://cfc2a1e5c6e329b0a83422342ea02773eb5ef1891c9c1caeab1bbfa4d5b26d52",
				"dweb:/ipfs/QmQaNcoCBijM5rQpHi53q5S9u5wnwsy8XwMeeEWbHgBoBq"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xce4e0bf91fc3bc1fb74403096ed7b80777df28e03154c9f64b049a862cef6557",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d8897ef365caecb89711a78a510a283a0faa56980e3048234c70ea8e43993ab",
				"dweb:/ipfs/QmZqX4RzBFMyJGYSTpDB5b2Fi2qzyicKTRNL2ozYi212Hb"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xbc6690e09b5c0729776d3af9161cebf6e92fd7e7e1396ce9d542f69c8f04282c",
			"license": "MIT",
			"urls": [
				"bzz-raw://5d0ba319335c98b76bf697a19c59134284cc48c7e2b2d95bd958352b5955b566",
				"dweb:/ipfs/QmXxCoGxsEN4oAVjNtoD6LosFMSJGifVcSzVH5pKV6ushD"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x9c9194a1f6fbb7b8a837dc16686626b2093a9c6e46c812e14b0b09c8497b0213",
			"license": "MIT",
			"urls": [
				"bzz-raw://542cb8cbe77cbb740d42beef23fe7a496711879c5ec843b89a8738e200a38e0b",
				"dweb:/ipfs/QmVpxj9wyTThYJWpoTc9mLWieiWj453h6b8mkLn8w2MdPG"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0x95262f508a95ba186f276d838bfa43a58d27f479e016366e2115b8c075c907c7",
			"license": "MIT",
			"urls": [
				"bzz-raw://b060659a09a7e2a8f0c5cc4ce73c8d92e94a0a9ec54ea8860087137960b8ddb8",
				"dweb:/ipfs/QmSkoQ72fHYECah3MKDpqFu3CNgWGnGYiHYtXZDwDhzRM5"
			]
		},
		"MNFT.sol": {
			"keccak256": "0xb0f4a21f1a26a61df7e0f7d94f26722860273687a3fe509c1fe3e26969bf6d3a",
			"license": "MIT",
			"urls": [
				"bzz-raw://f42646b4025bc0bbeebf09fac3a2cc16b9b9652d5ad5faa34767fac89b8f313f",
				"dweb:/ipfs/QmYmfM9mSJwzAoqo15GKRPsBonfUrLjcbVvVejvN69LN11"
			]
		}
	},
	"version": 1
}